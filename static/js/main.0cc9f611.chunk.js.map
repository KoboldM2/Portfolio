{"version":3,"sources":["components/Home.js","components/About.js","components/Projects.js","App.js","serviceWorker.js","index.js"],"names":["Home","Container","id","fluid","Row","Col","href","target","rel","size","Component","About","Projects","App","className","Navbar","bg","variant","Nav","exact","to","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yUA4CeA,G,6KAnCP,OACA,6BACI,kBAACC,EAAA,EAAD,CAAWC,GAAK,gBAAgBC,MAAM,QAClC,kBAACC,EAAA,EAAD,KACI,6BACI,kBAACC,EAAA,EAAD,KACI,uBAAGH,GAAK,YAAR,kCAMZ,kBAACE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,uBAAGC,KAAM,gCAAgCC,OAAO,SAASC,IAAI,uBACzD,kBAAC,IAAD,CAASC,KAAQ,OAGzB,kBAACJ,EAAA,EAAD,KACI,uBAAGC,KAAM,+BAA+BC,OAAO,SAASC,IAAI,uBACxD,kBAAC,IAAD,CAAUC,KAAQ,OAG1B,kBAACJ,EAAA,EAAD,KACI,uBAAGC,KAAM,2CAA2CC,OAAO,SAASC,IAAI,uBACpE,kBAAC,IAAD,CAAYC,KAAQ,c,GA3B7BC,cCKJC,E,uKARP,OACA,kC,GAHYD,aCULE,E,uKARP,OACA,kC,GAHeF,aC8BRG,MAvBf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,KAEE,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QACxB,kBAACC,EAAA,EAAD,CAAKJ,UAAU,WACb,kBAAC,IAAD,CAASK,OAAK,EAACC,GAAI,KAAnB,QACA,kBAAC,IAAD,CAASA,GAAK,YAAd,YACA,kBAAC,IAAD,CAASA,GAAK,aAAd,cAIJ,yBAAKN,UAAU,WACb,kBAAC,IAAD,CAAOK,OAAK,EAACE,KAAK,IAAIC,UAAWtB,IACjC,kBAAC,IAAD,CAAOqB,KAAK,WAAWC,UAAWX,IAClC,kBAAC,IAAD,CAAOU,KAAM,YAAYC,UAAWV,QCb1BW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0cc9f611.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Container, Row, Col } from 'react-bootstrap'\r\nimport { MdEmail  } from 'react-icons/md'\r\nimport { GrLinkedin, GrGithub } from 'react-icons/gr'\r\n\r\nimport '../css/homeStyle.css'\r\n\r\nclass Home extends Component {\r\n    render() {\r\n        return(\r\n        <div>\r\n            <Container id = \"homeContainer\" fluid=\"true\">\r\n                <Row>\r\n                    <div>\r\n                        <Col>\r\n                            <p id = \"homeName\">\r\n                                Mikhail Francesco D. Lukban\r\n                            </p>\r\n                        </Col>\r\n                    </div>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <a href =\"mailto:mikoi.lukban@gmail.com\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                            <MdEmail size = {64}/>\r\n                        </a>\r\n                    </Col>\r\n                    <Col>\r\n                        <a href =\"https://github.com/KoboldM2/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                            <GrGithub size = {64}/>\r\n                        </a>\r\n                    </Col>\r\n                    <Col>\r\n                        <a href =\"https://www.linkedin.com/in/mikoilukban/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                            <GrLinkedin size = {64}/>\r\n                        </a>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home","import React, { Component } from 'react'\r\n\r\nclass About extends Component {\r\n    render() {\r\n        return(\r\n        <div>\r\n\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default About","import React, { Component } from 'react'\r\n\r\nclass Projects extends Component {\r\n    render() {\r\n        return(\r\n        <div>\r\n\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Projects","import React from 'react';\nimport { Route, NavLink, HashRouter } from \"react-router-dom\";\nimport { Navbar, Nav } from 'react-bootstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Home from './components/Home'\nimport About from './components/About'\nimport Projects from './components/Projects'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HashRouter>\n\n        <Navbar bg=\"dark\" variant=\"dark\">\n          <Nav className=\"mr-auto\">\n            <NavLink exact to =\"/\">Home</NavLink>\n            <NavLink to = \"/aboutme\">About Me</NavLink>\n            <NavLink to = \"/projects\">Projects</NavLink>\n          </Nav>\n        </Navbar>\n\n        <div className=\"content\">\n          <Route exact path=\"/\" component={Home}/>\n          <Route path=\"/aboutme\" component={About}/>\n          <Route path =\"/projects\" component={Projects}/>\n        </div>\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n\n/* <ul className=\"header\">\n<li><NavLink exact to=\"/\">Home</NavLink></li>\n<li><NavLink to=\"/stuff\">Stuff</NavLink></li>\n<li><NavLink to=\"/contact\">Contact</NavLink></li>\n</ul>\n</div>\n\n<div className=\"content\">\n<Route exact path=\"/\" component={Home}/>\n<Route path=\"/stuff\" component={Stuff}/>\n<Route path=\"/contact\" component={Contact}/>\n</div>\n */","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}